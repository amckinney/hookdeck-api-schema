# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  source: source.yml
  commons: commons.yml
  connection: connection.yml
  pagination: pagination.yml

types:
  BookmarkId: string

  Bookmark:
    properties:
      id: BookmarkId
      team_id: commons.TeamId
      label: string
      webhook_id: commons.ConnectionId
      event_data_id: commons.EventDataId
      last_used_at: datetime
      updated_at: datetime
      created_at: datetime

  AllBookmarks:
    extends: pagination.Pagination
    properties:
      count: integer
      models: list<Bookmark>

  CreateBookmarkRequest:
    properties:
      label: string
      alias: optional<string>
      webhook_id: commons.ConnectionId
      event_data_id: commons.EventDataId

  UpdateBookmarkRequest:
    properties:
      label: optional<string>
      alias: optional<string>
      webhook_id: optional<commons.ConnectionId>
      event_data_id: optional<commons.EventDataId>

  Target:
    enum:
      - cli
      - http

services:
  http:
    BookmarkService:
      docs: |
        A bookmark lets you conveniently store and replay a specific request.
      base-path: /bookmarks
      auth: true
      endpoints:
        retrieveAllBookmarks:
          method: GET
          path: /
          response: AllBookmarks

        retrieveABookmark:
          method: GET
          path: /{id}
          path-parameters:
            id: BookmarkId
          response: Bookmark

        createBookmark:
          method: POST
          path: /
          request: CreateBookmarkRequest
          response: Bookmark

        updateBookmark:
          method: PUT
          path: /{id}
          path-parameters:
            id: BookmarkId
          request: UpdateBookmarkRequest
          response: Bookmark

        triggerBookmark:
          docs: |
            This endpoint uses a bookmark to create events.
          method: POST
          path: /{id}/trigger
          path-parameters:
            id: Bookmark
          request: optional<Target>

        deleteBookmark:
          method: DELETE
          path: /{id}
          path-parameters:
            id: BookmarkId
          response: BookmarkId
