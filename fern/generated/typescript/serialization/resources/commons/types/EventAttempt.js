"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventAttempt = void 0;
const core = __importStar(require("../../../../core"));
exports.EventAttempt = core.serialization.object({
    id: core.serialization.string(),
    teamId: core.serialization.property("team_id", core.serialization.string()),
    eventId: core.serialization.property("event_id", core.serialization.string()),
    responseStatus: core.serialization.property("response_status", core.serialization.number().optional()),
    attemptNumber: core.serialization.property("attempt_number", core.serialization.lazy(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).AttemptNumber).optional()),
    trigger: core.serialization.lazy(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).AttemptTrigger).optional(),
    errorCode: core.serialization.property("error_code", core.serialization.lazy(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).AttemptErrorCodes).optional()),
    body: core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).AttemptErrorBody).optional(),
    requestedUrl: core.serialization.property("requested_url", core.serialization.string().optional()),
    bulkRetryId: core.serialization.property("bulk_retry_id", core.serialization.string().optional()),
    status: core.serialization.lazy(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).AttemptStatus),
    successfulAt: core.serialization.property("successful_at", core.serialization.string().optional()),
    deliveredAt: core.serialization.property("delivered_at", core.serialization.string().optional()),
    respondedAt: core.serialization.property("responded_at", core.serialization.string().optional()),
    deliveryLatency: core.serialization.property("delivery_latency", core.serialization.number().optional()),
    responseLatency: core.serialization.property("response_latency", core.serialization.number().optional()),
    updatedAt: core.serialization.property("updated_at", core.serialization.string()),
    createdAt: core.serialization.property("created_at", core.serialization.string()),
    state: core.serialization.lazy(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).AttemptState).optional(),
    archivedAt: core.serialization.property("archived_at", core.serialization.string().optional()),
    destinationId: core.serialization.property("destination_id", core.serialization.string().optional()),
});
