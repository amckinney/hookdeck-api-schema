"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BulkRetryRequestProperties = void 0;
const core = __importStar(require("../../../../core"));
exports.BulkRetryRequestProperties = core.serialization.object({
    include: core.serialization.lazy(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).QueryParametersInclude).optional(),
    id: core.serialization.string().optional(),
    status: core.serialization.string().optional(),
    issueId: core.serialization.property("issue_id", core.serialization.string().optional()),
    webhookId: core.serialization.property("webhook_id", core.serialization.string().optional()),
    destinationId: core.serialization.property("destination_id", core.serialization.string().optional()),
    sourceId: core.serialization.property("source_id", core.serialization.string().optional()),
    attempts: core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).CreateEventsBulkAttempts).optional(),
    responseStatus: core.serialization.property("response_status", core.serialization.number().optional()),
    successfulAt: core.serialization.property("successful_at", core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).CreateEventsBulkSuccessAt).optional()),
    createdAt: core.serialization.property("created_at", core.serialization
        .lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).CreateEventsBulkResponseCreatedOrLastAttemptAt)
        .optional()),
    errorCode: core.serialization.property("error_code", core.serialization.string().optional()),
    cliId: core.serialization.property("cli_id", core.serialization.string().optional()),
    cliUserId: core.serialization.property("cli_user_id", core.serialization.string().optional()),
    lastAttemptAt: core.serialization.property("last_attempt_at", core.serialization
        .lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).CreateEventsBulkResponseCreatedOrLastAttemptAt)
        .optional()),
    eventDataId: core.serialization.property("event_data_id", core.serialization.string().optional()),
    headers: core.serialization.string().optional(),
    body: core.serialization.string().optional(),
    parsedQuery: core.serialization.property("parsed_query", core.serialization.string().optional()),
    bulkRetryId: core.serialization.property("bulk_retry_id", core.serialization.string().optional()),
    path: core.serialization.string().optional(),
    orderBy: core.serialization.property("order_by", core.serialization.lazy(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).CreateBulkRetryRequestOrderBy).optional()),
    dir: core.serialization.lazy(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).CreateEventsBulkResponseDir).optional(),
    limit: core.serialization.number().optional(),
    next: core.serialization.string().optional(),
    prev: core.serialization.string().optional(),
});
